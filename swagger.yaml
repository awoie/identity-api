openapi: "3.0.0"

servers:
- url: https://development.trust-agency.com/v1
  description: Development server
- url: https://staging.trust-agency.com/v1
  description: Staging server
- url: https://api.trust-agency.com/v1
  description: Production server

tags:
  - name: identifiers
    description: Identifier Management allows to manage the DIDs controlled by the tenant.
  - name: credentials
    description: Verifiable Credentials Management allows to manage and share VCs between tenants.

info:
  title: TrustAgency Tenant API
  version: 1.0.0
  description: |
    The Tenant API allows tenants to manage their Decentralized Identifiers (DIDs) and W3C Verifiable Credentials (VCs).

    # Authentication
    
    All API requests expect a HTTP `Authorization` header containing a JWT Bearer token.
    
    The JWT contains the following claims:
    
    - `role` REQUIRED. Value shall be â€œtenant"
    - `iat` REQUIRED. Time of issuance, e.g., 1300819380
    - `exp` REQUIRED. Time of expiration, e.g., 1300819380
    - `tenant` REQUIRED. The unique tenant ID, e.g., "340ea243"
    
    **NOTE:** This is the internal JWT authentication. The TrustAgency Gateway Service supports external OAuth2 and OpenID Connect provider such as Codefi IAM, Auth0 or Azure.

    # Identifiers
    Identifiers are represented by Decentralized Identifiers (DIDs). The specific DID method determines the properties of the DID. For example, Ether DID is a DID method that can be anchored on any EVM-compliant Blockchain. Every Ether DID starts with the `did:ethr` prefix.
    
    # Verifiable Credentials (VCs)
    ## Credential Object 
    
    The `Credential` object contains a JSON object complying with the W3C Verifiable Credential specification. The specification describes core properties of VCs but allows for custom properties added to the credential itself or to the credential subject. It is up to the developers how they make use of custom properties and they have to ensure the `@context` attribute contains the required vocabulary.
    
    ## Proof Formats
    Without a proof, the credential is not verifiable. The W3C Verifiable Credentials specification allows for different proof formats:
    - JWT (external proof which the JWT itself represents)
    - LD-Proof (internal proof contained in the `proof` property)
    - ZKP-based
    
    This API supports **only** JWT proofs. LD-Proofs and ZKP-based proofs may be added in the future and the API should then stay backwards compatible.
    
    ## Verifiable Credential Object 
    The `VerifiableCredential` object contains the `Credential` object and an additional proof. 
    
    JWTs are considered to be external proofs. In that case, the `proof` property of the `VerifiableCredential` contains a `jwt` property that contains the JWT in JWS compact serialization. Internal proofs, i.e., LD-Proofs, are contained in the in the `proof` property directly. Note, for JWT-proofs, the `Credential` properties are optional. This is because JWT contains a transformed representation of the original `Credential` properties.
            
paths:
  /identifiers:
    post:
      summary: Creates and returns a new DID.
      description: |
        Creates and returns a new DID of a specific type for the tenant.

        Additionally, the inbound DIDComm messaging service endpoint will be added to the DID Document of the created DID. The default service endpoint can be configured.
        
        The first DID that is created will be the default DID for the tenant.
      tags:
        - identifiers
      operationId: addDid
      requestBody:
        description: |
          The request body contains an `object` with the following properties:
          - `type` OPTIONAL.
          
            The type of the DID to create. If not provided, the default type is `rinkeby-ethr-did` which refers to Ether DID on Rinkeby. 
          
            **NOTE**: The default type can be configured.
          
          - `messagingEndpoint` OPTIONAL.
          
            The DIDComm messaging service endpoint that will be added to the DID Document. If no endpoint is provided, then the configured message endpoint will be used. 
            
            **NOTE:** this endpoint must not contain any personal identifiable information (PII) as this information could be written to the Blockchain.        
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [ rinkeby-ethr-did ] 
                messagingEndpoint:
                  type: string
                  format: uri
              example: 
                type: rinkeby-ethr-did
                messagingEndpoint: "https://trustagency.domain.com/didcomm"
      responses:
        '200':
          description: Returns the new DID if the call succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  did:
                    type: string
                example:
                  did: "did:ethr:rinkeby:0x01cd6ba9d893d4dfa82627b92cb43100d73c1ef6"
        '401':
          description: Not authenticated
        '403':
          description: Not authorized 
        '404':
          description: The requested resource doesn't exist 
        '500':
          description: Internal error 
                  
    get:
      summary: Returns all controlled DIDs.
      description: |
        Returns all DIDs controlled by the tenant.
      tags:
        - identifiers
      operationId: listDids
      responses:
        '200':
          description: Returns an array of DIDs controlled by the tenant if successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifiers:
                    type: array
                    items: 
                      type: string
                example:
                  identifiers:
                    - "did:ethr:rinkeby:0x01cd6ba9d893d4dfa82627b92cb43100d73c1ef6"
                    - "did:ethr:rinkeby:0xb9c5714089478a327f09197987f16f9e5d936e8a"
        '401':
          description: Not authenticated
        '403':
          description: Not authorized 
        '404':
          description: The requested resource doesn't exist 
        '500':
          description: Internal error 
                    

  /credentials/issue:
    post:
      summary: Issues a W3C VC.
      description: |
        Issues a W3C VC and returns it in the response body. 
        
        **NOTE:** Currently, only the JWT proof format is supported.
      tags:
        - credentials
      operationId: issueVc
      requestBody:
        description: |
          The request body contains an `object` with the following properties:
            - `credential` REQUIRED.
            
              Contains the `Credential` object.
              
              The `issuer` attribute must be a DID that is controlled by the tenant. If no `issuer` property is provided, the default DID of the tenant wil be used to issue the VC. 
              
              The `id` of the `credentialSubject` must be provided and should be a valid DID. 
            
              If custom properties are used, the `@context` property should contain the corresponding entries. `@context` checks are not enforced.
            
            - `keepCopy` OPTIONAL.
            
              Default is `true` to save the VC in the tenant's VC storage. `false` indicates to not store the VC.
            
            - `revocable` OPTIONAL.
            
              Default is `false` to indicate the issued VC cannot be revoked. If set to `true`, then an additional `credentialStatus` property will be added to the VC.
            
            - `proofFormat` OPTIONAL.
            
              Default is `jwt` to indicate issued VC should use the external JWT-based proof. Other options are not supported yet.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credential:
                  $ref: '#/components/schemas/Credential'
                keepCopy:
                  type: boolean
                revocable:
                  type: boolean
                proofFormat:
                  type: string
                  enum: [ jwt ]

      responses:
        '200':
          description: Returns the issued `VerifiableCredential` object in the response body if successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiableCredential'
        '401':
          description: Not authenticated
        '403':
          description: Not authorized 
        '404':
          description: The requested resource doesn't exist 
        '500':
          description: Internal error 
                
                  
  /credentials/send:
    post:
      summary: Sends a VC to a DID.
      description: |
        Sends a VC to the DID in the `credentialSubject` through the DID's DIDComm messaging endpoint.
      tags:
        - credentials
      operationId: sendVc
      requestBody:
        description: |
          The request body contains an `object` with the following properties:
          - `verifiableCredential` REQUIRED. 
          
            The `VerifiableCredential` object.
            
            **NOTE:** For JWT proofs, all `Credential` properties in the `VerifiableCredential` object will be ignored and only the `jwt` property recognized.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verifiableCredential:
                  $ref: '#/components/schemas/VerifiableCredential'
              example:
                verifiableCredential:
                  proof:
                    jwt: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDpleGFtcGxlOmFiZmUxM2Y3MTIxMjA0MzFjMjc2ZTEyZWNhYiNrZXlzLTEifQ.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiOjE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjdCI6eyJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IjxzcGFuIGxhbmc9J2ZyLUNBJz5CYWNjYWxhdXLDqWF0IGVuIG11c2lxdWVzIG51bcOpcmlxdWVzPC9zcGFuPiJ9fX19.KLJo5GAyBND3LDTn9H7FQokEsUEi8jKwXhGvoN3JtRa51xrNDgXDb0cq1UTYB-rK4Ft9YVmR1NI_ZOF8oGc_7wAp8PHbF2HaWodQIoOBxxT-4WNqAxft7ET6lkH-4S6Ux3rSGAmczMohEEf8eCeN-jC8WekdPl6zKZQj0YPB1rx6X0-xlFBs7cl6Wt8rfBP_tZ9YgVWrQmUWypSioc0MUyiphmyEbLZagTyPlUyflGlEdqrZAv6eSe6RtxJy6M1-lD7a5HTzanYTWBPAUHDZGyGKXdJw-W_x0IWChBzI8t3kpG253fg6V3tPgHeKXE94fz_QpYfg--7kLsyBAfQGbg'

      responses:
        '200':
          description: Status OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ ok ]
        '401':
          description: Not authenticated
        '403':
          description: Not authorized 
        '404':
          description: The requested resource doesn't exist 
        '500':
          description: Internal error 
                    
                 
  /credentials/query:
    post:
      summary: Queries VCs.
      description: |
        Returns an array of W3C VCs which the tenant issued or has received that match the specified filter options.
      tags:
        - credentials
      operationId: queryVcs
      requestBody:
        description: |
          The request body contains an `object` with the following properties:
            - `filter` OPTIONAL.
              
              Options that filter the resulting VCs. The query allows to specify any W3C VC properties. If no `filter` is provided, all issued and received VCs will be returned.
            
            - `includeTransformedCredential` OPTIONAL.
            
              Default is `true`. If set to `false`, the VCs in the result based on JWT-proofs will not contain the transformed `credential` property.
            
            - `includeIssuedByTenantOnly`: OPTIONAL.
            
              Default is `false`. If set to `true`, the result will only include VCs that were issued by one of the tenant's DIDs.
            
            - `includeIssuedToTenantOnly`: OPTIONAL.
            
              Default is `false`. If set to `true`, the result will only include VCs that were issued to one of the tenant's DIDs.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/Credential'
                includeTransformedCredential:
                  type: boolean
                includeIssuedByTenantOnly:
                  type: boolean
                includeIssuedToTenantOnly:
                  type: boolean
              example:
                filter:
                  issuer: 'did:ethr:rinkeby:0x10bc8182199a34bf46681867ab6d11906272cd7a'
                  type:
                  - 'VerifiableCredential'
                  - 'UniversityDegreeCredential'
                includeIssuedByTenantOnly: true
                includeTransformedCredential: true

      responses:
        '200':
          description: Status OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  verifiableCredentials:
                    type: array
                    items:
                      $ref: '#/components/schemas/VerifiableCredential'
        '401':
          description: Not authenticated
        '403':
          description: Not authorized 
        '404':
          description: The requested resource doesn't exist 
        '500':
          description: Internal error 
                      
                      
  /credentials/revoke:
    post:
      summary: Revokes a VC.
      description: |
        Revokes the provided `VerifiableCredential` object if the tenant was the issuer.
      tags:
        - credentials
      operationId: revokeVc
      requestBody:
        description: |
          The request body contains an `object` with the following properties:
            - `verifiableCredential` REQUIRED. 
            
              The `VerifiableCredential` object.
              
              **NOTE:** For JWT proofs, all `Credential` properties in the `VerifiableCredential` object will be ignored.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verifiableCredential:
                  $ref: '#/components/schemas/VerifiableCredential'
              example:
                verifiableCredential:
                  proof:
                    jwt: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDpleGFtcGxlOmFiZmUxM2Y3MTIxMjA0MzFjMjc2ZTEyZWNhYiNrZXlzLTEifQ.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiOjE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjdCI6eyJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IjxzcGFuIGxhbmc9J2ZyLUNBJz5CYWNjYWxhdXLDqWF0IGVuIG11c2lxdWVzIG51bcOpcmlxdWVzPC9zcGFuPiJ9fX19.KLJo5GAyBND3LDTn9H7FQokEsUEi8jKwXhGvoN3JtRa51xrNDgXDb0cq1UTYB-rK4Ft9YVmR1NI_ZOF8oGc_7wAp8PHbF2HaWodQIoOBxxT-4WNqAxft7ET6lkH-4S6Ux3rSGAmczMohEEf8eCeN-jC8WekdPl6zKZQj0YPB1rx6X0-xlFBs7cl6Wt8rfBP_tZ9YgVWrQmUWypSioc0MUyiphmyEbLZagTyPlUyflGlEdqrZAv6eSe6RtxJy6M1-lD7a5HTzanYTWBPAUHDZGyGKXdJw-W_x0IWChBzI8t3kpG253fg6V3tPgHeKXE94fz_QpYfg--7kLsyBAfQGbg'
      responses:
        '200':
          description: Status OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ ok ]
        '401':
          description: Not authenticated
        '403':
          description: Not authorized 
        '404':
          description: The requested resource doesn't exist 
        '500':
          description: Internal error 
                    
                    
  /credentials/verify:
    post:
      summary: Verifies a VC.
      description: |
        Verifies the provided VC. The verification will include all basic checks such as proof verification, expiration etc. as well as checks against the contained VC status method that will reflect the revocation status.
      tags:
        - credentials
      operationId: verifyVc
      requestBody:
        description: |
          The request body contains an `object` with the following properties:
            - `verifiableCredential` REQUIRED. 
            
              The `VerifiableCredential` object.
              
              **NOTE:** For JWT proofs, all `Credential` properties in the `VerifiableCredential` object will be ignored.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verifiableCredential:
                  $ref: '#/components/schemas/VerifiableCredential'
              example:
                verifiableCredential:
                  proof:
                    jwt: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDpleGFtcGxlOmFiZmUxM2Y3MTIxMjA0MzFjMjc2ZTEyZWNhYiNrZXlzLTEifQ.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiOjE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjdCI6eyJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IjxzcGFuIGxhbmc9J2ZyLUNBJz5CYWNjYWxhdXLDqWF0IGVuIG11c2lxdWVzIG51bcOpcmlxdWVzPC9zcGFuPiJ9fX19.KLJo5GAyBND3LDTn9H7FQokEsUEi8jKwXhGvoN3JtRa51xrNDgXDb0cq1UTYB-rK4Ft9YVmR1NI_ZOF8oGc_7wAp8PHbF2HaWodQIoOBxxT-4WNqAxft7ET6lkH-4S6Ux3rSGAmczMohEEf8eCeN-jC8WekdPl6zKZQj0YPB1rx6X0-xlFBs7cl6Wt8rfBP_tZ9YgVWrQmUWypSioc0MUyiphmyEbLZagTyPlUyflGlEdqrZAv6eSe6RtxJy6M1-lD7a5HTzanYTWBPAUHDZGyGKXdJw-W_x0IWChBzI8t3kpG253fg6V3tPgHeKXE94fz_QpYfg--7kLsyBAfQGbg'
      responses:
        '200':
          description: |
            Returns the verification status of the VC. The `validity` and an optional `reason` is reflected in the `result` property. The following are the possible options for `validity`:
            
            - `active`
            
              The VC was successfully verified.
            
            - `invalid`
            
              The VC has failed basic verification and a `reason` property will be provided.
            
              The following values for the `reason` properties can be expected:
              - `expired` if the VC has expired.
              - `notValidYet` if the VC is not valid yet.
              - `proofInvalid` if the proof verification failed.
              - `revokedByIssuer` if the VC was revoked by the issuer of the VC.
  
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
                    enum: [ active, invalid ]
                  reason:
                    type: string
                    enum: [ expired, notValidYet, proofInvalid, revokedByIssuer ]
              examples:
                Active:
                  value:
                    status: active
                Expired:
                  value:
                    status: invalid
                    reason: expired
                NotValidYet:
                  value:
                    status: invalid
                    reason: notValidYet
                Invalid:
                  value:
                    status: invalid
                    reason: proofInvalid
                Revoked:
                  value:
                    status: invalid
                    reason: revokedByIssuer
        '401':
          description: Not authenticated
        '403':
          description: Not authorized 
        '404':
          description: The requested resource doesn't exist 
        '500':
          description: Internal error 
                    

  /credentials/publish:
    post:
      summary: Publishes a VC.
      description: |
        TBD
      tags:
        - credentials
      operationId: publishVc
      requestBody:
        description: TBD
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verifiableCredential:
                  $ref: '#/components/schemas/VerifiableCredential'
              example:
                verifiableCredential:
                  proof:
                    jwt: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDpleGFtcGxlOmFiZmUxM2Y3MTIxMjA0MzFjMjc2ZTEyZWNhYiNrZXlzLTEifQ.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiOjE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjdCI6eyJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IjxzcGFuIGxhbmc9J2ZyLUNBJz5CYWNjYWxhdXLDqWF0IGVuIG11c2lxdWVzIG51bcOpcmlxdWVzPC9zcGFuPiJ9fX19.KLJo5GAyBND3LDTn9H7FQokEsUEi8jKwXhGvoN3JtRa51xrNDgXDb0cq1UTYB-rK4Ft9YVmR1NI_ZOF8oGc_7wAp8PHbF2HaWodQIoOBxxT-4WNqAxft7ET6lkH-4S6Ux3rSGAmczMohEEf8eCeN-jC8WekdPl6zKZQj0YPB1rx6X0-xlFBs7cl6Wt8rfBP_tZ9YgVWrQmUWypSioc0MUyiphmyEbLZagTyPlUyflGlEdqrZAv6eSe6RtxJy6M1-lD7a5HTzanYTWBPAUHDZGyGKXdJw-W_x0IWChBzI8t3kpG253fg6V3tPgHeKXE94fz_QpYfg--7kLsyBAfQGbg'
      responses:
        '200':
          description: Status OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ ok ]
        '401':
          description: Not authenticated
        '403':
          description: Not authorized 
        '404':
          description: The requested resource doesn't exist 
        '500':
          description: Internal error 

components:
  schemas:
    VerifiableCredential:
      allOf:
        - $ref: '#/components/schemas/Credential'
        - type: object
          properties:
            proof:
              type: object
              additionalProperties: true
              properties:
                jwt:
                  type: string
          example:
            proof:
              jwt: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDpleGFtcGxlOmFiZmUxM2Y3MTIxMjA0MzFjMjc2ZTEyZWNhYiNrZXlzLTEifQ.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiOjE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjdCI6eyJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IjxzcGFuIGxhbmc9J2ZyLUNBJz5CYWNjYWxhdXLDqWF0IGVuIG11c2lxdWVzIG51bcOpcmlxdWVzPC9zcGFuPiJ9fX19.KLJo5GAyBND3LDTn9H7FQokEsUEi8jKwXhGvoN3JtRa51xrNDgXDb0cq1UTYB-rK4Ft9YVmR1NI_ZOF8oGc_7wAp8PHbF2HaWodQIoOBxxT-4WNqAxft7ET6lkH-4S6Ux3rSGAmczMohEEf8eCeN-jC8WekdPl6zKZQj0YPB1rx6X0-xlFBs7cl6Wt8rfBP_tZ9YgVWrQmUWypSioc0MUyiphmyEbLZagTyPlUyflGlEdqrZAv6eSe6RtxJy6M1-lD7a5HTzanYTWBPAUHDZGyGKXdJw-W_x0IWChBzI8t3kpG253fg6V3tPgHeKXE94fz_QpYfg--7kLsyBAfQGbg'
    
    Credential:
      type: object
      additionalProperties: true
      properties:
        '@context': 
          type: array
          items:
            type: string
        id:
          type: string
        issuer:
          type: string
          format: uri
        issuanceDate:
          type: string
        credentialSubject:
          type: object
          additionalProperties: true
          properties:
            id:
              type: string
              format: uri
      example:
        '@context': 
          - 'https://www.w3.org/2018/credentials/v1'
          - 'https://www.w3.org/2018/credentials/examples/v1'
        id: 'uuid:9110652b-3676-4720-8139-9163b244680d'
        type:
          - 'VerifiableCredential'
          - 'UniversityDegreeCredential'
        issuer: 'did:ethr:rinkeby:0x10bc8182199a34bf46681867ab6d11906272cd7a'
        issuanceDate: '2020-03-11T23:09:06.803Z'
        credentialSubject:
          id: 'did:ethr:rinkeby:0xb8057c2ada7667beb6ad24ea59768ee1abac82b8'
          degree:
            type: 'BachelorDegree'
            name: 'Bachelor of Science and Arts'
    
              
          
